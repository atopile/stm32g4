import STM32G431CBU6 from "elec/src/STM32G431CBU6.ato"
import TAXM8M4RDBCCT2T from "elec/src/TAXM8M4RDBCCT2T.ato"
import Resistor from "generics/resistors.ato"
import Capacitor from "generics/capacitors.ato"
import can_xcvr from "elec/src/SN65HVD230DR.ato"
import SWD from "generics/interfaces.ato"
import SPI from "generics/interfaces.ato"
import I2C from "generics/interfaces.ato"
import USB_PD from "generics/interfaces.ato"
import Power from "generics/interfaces.ato"
import CAN_TTL from "generics/interfaces.ato"
import CAN from "generics/interfaces.ato"
import BLDC_3PWM from "generics/interfaces.ato"

component R0402 from Resistor:
    footprint = "R0402"
    package = "0402"
    value = 1kohm +/- 5%
component C0402 from Capacitor:
    footprint = "C0402"
    package = "0402"
    value = 100nF +/- 25%

module STM32G431CBU6_kit:
    # Microcontroller
    micro = new STM32G431CBU6

    power = new Power
    power.gnd ~ micro.EP
    power.vcc ~ micro.VDDA
    power.vcc ~ micro.VDD
    power.vcc ~ micro.VREF_

    # BLDC driver interface
    bldc_3pwm = new BLDC_3PWM
    bldc_3pwm.phase_a ~ micro.PA0
    bldc_3pwm.phase_b ~ micro.PA1
    bldc_3pwm.phase_c ~ micro.PA2
    bldc_3pwm.enable ~ micro.PA3

    # SPI interface
    spi = new SPI
    spi.mosi ~ micro.PB15
    spi.miso ~ micro.PB14
    spi.sck ~ micro.PB13
    spi.cs ~ micro.PB11

    # i2c
    i2c = new I2C
    i2c.sda ~ micro.PB9
    i2c.scl ~ micro.PB8_BOOT0

    # i2c pullups
    sda_pullup = new R0402
    sda_pullup.p1 ~ i2c.sda
    sda_pullup.p2 ~ power.vcc

    scl_pullup = new R0402
    scl_pullup.p1 ~ i2c.scl
    scl_pullup.p2 ~ power.vcc

    # JTAG interface (SWD)
    # Hook this up to a connector along with gnd and 3v3 for programming
    swd = new SWD
    swd.swdio ~ micro.PA13
    swd.swclk ~ micro.PA14
    swd.gnd ~ power.gnd

    # boot0 pulldown
    boot0_pulldown = new R0402
    boot0_pulldown.p1 ~ micro.PB8_BOOT0
    boot0_pulldown.p2 ~ power.gnd

    # Bypass capacitors
    c_bp_3v_100nf_1 = new C0402
    c_bp_3v_100nf_2 = new C0402
    c_bp_3v_100nf_3 = new C0402
    c_bp_3v_100nf_4 = new C0402
    c_bp_3v_1uf = new C0402
    c_bp_3v_1uf.value = 1uF +/- 25%

    c_bp_3v_100nf_1.p1 ~ power.vcc
    c_bp_3v_100nf_2.p1 ~ power.vcc
    c_bp_3v_100nf_3.p1 ~ power.vcc
    c_bp_3v_100nf_4.p1 ~ power.vcc
    c_bp_3v_1uf.p1 ~ power.vcc

    c_bp_3v_100nf_1.p2 ~ power.gnd
    c_bp_3v_100nf_2.p2 ~ power.gnd
    c_bp_3v_100nf_3.p2 ~ power.gnd
    c_bp_3v_100nf_4.p2 ~ power.gnd
    c_bp_3v_1uf.p2 ~ power.gnd

    # Oscillator
    osc = new TAXM8M4RDBCCT2T
    c_osc_1 = new C0402
    c_osc_1.value = 20pF +/- 10%
    c_osc_2 = new C0402
    c_osc_2.value = 20pF +/- 10%
    r_osc = new R0402
    r_osc.value = 220ohm +/- 10%

    micro.PF0_OSC_IN ~ osc.in
    micro.PF1_OSC_OUT ~ r_osc.p1
    r_osc.p2 ~ osc.out
    osc.gnd ~ power.gnd

    osc.in ~ c_osc_1.p1
    osc.out ~ c_osc_2.p1

    c_osc_1.p2 ~ power.gnd
    c_osc_2.p2 ~ power.gnd

    # CANBUS Comms
    can_ttl = new CAN_TTL
    can_ttl.rx ~ micro.PB5
    can_ttl.tx ~ micro.PB6

    can = new CAN

    canbus = new can_xcvr
    canbus.can_ttl ~ can_ttl
    canbus.can ~ can
    canbus.power ~ power

    # USB interface
    usb = new USB_PD
    usb.gnd ~ power.gnd
    usb.dp ~ micro.PA12
    usb.dm ~ micro.PA11

    # USB-PD stuff
    usb.cc1 ~ micro.PB6 #CC1 needed for PD comms
    usb.cc1 ~ micro.PA9 #DBCC1 only needed to power up with no other voltage source
    usb.cc2 ~ micro.PB4 #CC2 needed for PD comms
    usb.cc2 ~ micro.PA10 #DBCC2 only needed to power up with no other voltage source
